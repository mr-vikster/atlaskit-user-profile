{"version":3,"sources":["shared/layout/Header.tsx","shared/layout/Footer.tsx","views/UserProfile.tsx","views/UserProfileForm.tsx","views/Root.tsx","App.tsx","index.tsx"],"names":["ProductHomeExample","history","useHistory","icon","AtlassianIcon","logo","AtlassianLogo","onClick","push","Header","AtlassianNavigation","label","primaryItems","PrimaryButton","renderProductHome","PageFooter","styled","footer","Footer","href","target","rel","UserProfileWrapper","div","ProfileDataRow","ProfileDataElement","EditLink","Link","UserProfile","Avatar","size","src","localStorage","getItem","undefined","to","appearance","FormWrapper","FormFieldRow","UserProfileForm","useState","avatarFileSizeError","setAvatarFileSizeError","handleAvatarUpload","e","currentTarget","files","file","image","value","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","then","base64","console","debug","Form","onSubmit","data","setTimeout","Object","entries","filter","field","map","setItem","formProps","submitting","Field","name","defaultValue","isRequired","validate","match","fieldProps","valid","autoComplete","type","onChange","accept","CheckboxField","defaultIsChecked","FormFooter","isLoading","Root","exact","path","component","createBrowserHistory","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ba16697.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AtlassianNavigation, ProductHome, PrimaryButton } from '@atlaskit/atlassian-navigation';\r\nimport { AtlassianIcon, AtlassianLogo } from '@atlaskit/logo';\r\n\r\nconst ProductHomeExample = () => {\r\n  const history = useHistory();\r\n  return <ProductHome icon={AtlassianIcon} logo={AtlassianLogo} onClick={() => history.push('/')}/>\r\n};\r\n\r\nconst Header = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div>\r\n      <AtlassianNavigation\r\n        label=\"site\"\r\n        primaryItems={[\r\n          <PrimaryButton onClick={() => history.push('/atlaskit-user-profile/user-profile')}>User Profile</PrimaryButton>,\r\n          <PrimaryButton onClick={() => history.push('/atlaskit-user-profile/user-profile/edit')}>Edit User Profile</PrimaryButton>,\r\n        ]}\r\n        renderProductHome={ProductHomeExample}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PageFooter = styled.footer`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 16px;\r\n  box-shadow: 0 0 5px 0 rgba(0,0,0,0.2);\r\n  & p {\r\n    @media (max-width: 600px) {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n  & a {\r\n    font-size: 18px;\r\n    text-decoration: none;\r\n    color: blue;\r\n    &:after {\r\n      content: '';\r\n      width: 0px;\r\n      height: 1px;\r\n      display: block;\r\n      background: blue;\r\n      transition: .3s;\r\n    }\r\n    &:hover:after {\r\n      width: 100%;\r\n    }\r\n  }\r\n  @media (max-width: 600px) {\r\n    padding: 8px;\r\n  }\r\n`;\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <PageFooter >\r\n      <p>Â© 2021 test assignment by Viktor Pokhvalenyi</p>\r\n      <a href=\"https://www.linkedin.com/in/viktor-pokhvaleny/\" target=\"_blank\" rel=\"noreferrer noopener\">LinkedIn</a>\r\n    </PageFooter>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Button from '@atlaskit/button';\r\nimport Avatar from '@atlaskit/avatar';\r\n\r\nconst UserProfileWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 60%;\r\n  margin: 0 auto;\r\n  height: calc(100vh - 56px);\r\n  @media (max-width: 600px) {\r\n    width: 90%;\r\n    height: initial;\r\n  }\r\n`;\r\n\r\nconst ProfileDataRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n  \r\n  const ProfileDataElement = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-self: flex-start;\r\n  flex-wrap: wrap;\r\n  min-width: 200px;\r\n  flex-basis: 49%;\r\n  & span {\r\n    font-size: 14px;\r\n    color: grey;\r\n  }\r\n  & p {\r\n    margin: 0 0 16px;\r\n    font-size: 24px;\r\n    @media (max-width: 600px) {\r\n      font-size: 20px;\r\n    }\r\n  }\r\n  @media (max-width: 600px) {\r\n    align-items: flex-start;\r\n    min-width: initial;\r\n  }\r\n`;\r\n\r\nconst EditLink = styled(Link)`\r\n  position: absolute;\r\n  bottom: 32px;\r\n  right: 32px;\r\n  text-decoration: none;\r\n  @media (max-width: 600px) {\r\n    position: relative;\r\n    bottom: initial;\r\n    right: initial;\r\n    margin: 0 0 12px auto;\r\n  }\r\n`;\r\n\r\nconst UserProfile = () => {\r\n  return (\r\n    <UserProfileWrapper>\r\n      <h2>Your Profile</h2>\r\n      <Avatar size=\"xxlarge\" src={localStorage.getItem('atlaskit-user-profile-avatar') || undefined}/>\r\n      <br/>\r\n      <ProfileDataRow>\r\n        <ProfileDataElement>\r\n          <span>Name:</span>\r\n          <p>{localStorage.getItem('name_atlaskit_test')}</p>\r\n        </ProfileDataElement>\r\n        <ProfileDataElement>\r\n          <span>Surname:</span>\r\n          <p>{localStorage.getItem('surname_atlaskit_test')}</p>\r\n        </ProfileDataElement>\r\n      </ProfileDataRow>\r\n      <ProfileDataRow>\r\n        <ProfileDataElement>\r\n          <span>Username:</span>\r\n          <p>{localStorage.getItem('username_atlaskit_test')}</p>\r\n        </ProfileDataElement>\r\n        <ProfileDataElement>\r\n          <span>Email:</span>\r\n          <p>{localStorage.getItem('email_atlaskit_test')}</p>\r\n        </ProfileDataElement>\r\n      </ProfileDataRow>\r\n      <ProfileDataRow>\r\n        <ProfileDataElement>\r\n          <span>Newsletter subscription:</span>\r\n          <p>{!!localStorage.getItem('newsletter_atlaskit_test') ? 'Yes' : 'No'}</p>\r\n        </ProfileDataElement>\r\n      </ProfileDataRow>\r\n      <EditLink to=\"/atlaskit-user-profile/user-profile/edit\">\r\n        <Button appearance=\"primary\">Edit</Button>\r\n      </EditLink>\r\n    </UserProfileWrapper>\r\n  )\r\n}\r\n\r\nexport default UserProfile\r\n","import React, { ChangeEvent, Fragment, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport Form, {  \r\n  CheckboxField,\r\n  ErrorMessage,\r\n  Field,\r\n  FormFooter,\r\n  HelperMessage,\r\n} from '@atlaskit/form';\r\nimport Button, { ButtonGroup, LoadingButton } from '@atlaskit/button';\r\nimport { Checkbox } from '@atlaskit/checkbox';\r\nimport TextField from '@atlaskit/textfield';\r\n\r\nconst FormWrapper = styled.div`\r\n  width: 60%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 24px auto;\r\n  height: calc(100vh - 56px);\r\n  & form {\r\n    width: 100%;\r\n  }\r\n  @media (max-width: 600px) {\r\n    width: 90%;\r\n    margin: 16px auto;\r\n  }\r\n`;\r\n\r\nconst FormFieldRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  & > * {\r\n    flex-basis: 49%;\r\n  }\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst getBase64 = (file: File) => {\r\n  return new Promise((resolve,reject) => {\r\n     const reader = new FileReader();\r\n     reader.onload = () => resolve(reader.result);\r\n     reader.onerror = error => reject(error);\r\n     reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\nconst UserProfileForm = () => {\r\n\r\n  const history = useHistory();\r\n  const [avatarFileSizeError, setAvatarFileSizeError] = useState(false);\r\n\r\n  const handleAvatarUpload = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setAvatarFileSizeError(false);\r\n    if (!e.currentTarget.files) return;\r\n    const image = e.currentTarget.files[0];\r\n    if(image.size > 2097152){\r\n      setAvatarFileSizeError(true);\r\n      e.currentTarget.value = ''\r\n      return;\r\n   };\r\n    getBase64(image).then(base64 => {\r\n      localStorage['atlaskit-user-profile-avatar'] = base64;\r\n      console.debug(\"file stored\",base64);\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (data: any) => {\r\n    return new Promise(resolve => setTimeout(resolve, 1000)).then(() => {\r\n      Object.entries(data).filter((field: any) => field[0] !== 'avatar').map((field: any) => {\r\n        return localStorage.setItem(`${field[0]}_atlaskit_test`, field[1]);\r\n      });\r\n      return history.push('/atlaskit-user-profile/user-profile')\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FormWrapper>\r\n      <h2>Edit your profile</h2>\r\n      <Form<{ username: string; newsletter: boolean; name: string; surname: string; email: string; avatar: any }>\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ formProps, submitting }) => (\r\n          <form {...formProps}>\r\n            <FormFieldRow>\r\n              <Field\r\n                name=\"name\"\r\n                label=\"Name\"\r\n                defaultValue={localStorage.getItem('name_atlaskit_test') || undefined}\r\n                isRequired\r\n                validate={value =>\r\n                  value && value.match(/^[a-zA-Z]+$/gi) ? undefined : 'Invalid'\r\n                }\r\n              >\r\n                {({ fieldProps, error, valid }) => (\r\n                  <Fragment>\r\n                  <TextField {...fieldProps} />\r\n                  {error && !valid && (\r\n                    <HelperMessage>\r\n                      Only letters allowed in the Surname.\r\n                    </HelperMessage>\r\n                  )}\r\n                </Fragment>\r\n                )}\r\n              </Field>\r\n              <Field\r\n                name=\"surname\"\r\n                label=\"Surname\"\r\n                defaultValue={localStorage.getItem('surname_atlaskit_test') || undefined}\r\n                isRequired\r\n                validate={value =>\r\n                  value && value.match(/^[a-zA-Z]+$/gi) ? undefined : 'Invalid'\r\n                }\r\n              >\r\n                {({ fieldProps, error, valid }) => {\r\n                  return (\r\n                    <Fragment>\r\n                      <TextField {...fieldProps} />\r\n                      {error && !valid && (\r\n                        <HelperMessage>\r\n                          Only letters allowed in the Surname.\r\n                        </HelperMessage>\r\n                      )}\r\n                    </Fragment>\r\n                  );\r\n                }}\r\n              </Field>\r\n            </FormFieldRow>\r\n            <FormFieldRow>\r\n              <Field\r\n                name=\"username\"\r\n                label=\"User name\"\r\n                defaultValue={localStorage.getItem('username_atlaskit_test') || undefined}\r\n              >\r\n                {({ fieldProps, error }) => (\r\n                  <Fragment>\r\n                    <TextField autoComplete=\"off\" {...fieldProps} />\r\n                    {!error && (\r\n                      <HelperMessage>\r\n                        You can use letters, numbers & periods.\r\n                      </HelperMessage>\r\n                    )}\r\n                    {error && (\r\n                      <ErrorMessage>\r\n                        This user name is already in use, try another one.\r\n                      </ErrorMessage>\r\n                    )}\r\n                  </Fragment>\r\n                )}\r\n              </Field>\r\n              <Field\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                defaultValue={localStorage.getItem('email_atlaskit_test') || undefined}\r\n                validate={value =>\r\n                  value && value.match(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/gi) ? undefined : 'Invalid'\r\n                }\r\n              >\r\n                {({ fieldProps, error, valid }) => (\r\n                  <Fragment>\r\n                    <TextField autoComplete=\"off\" {...fieldProps} />\r\n                    {error && !valid && (\r\n                        <HelperMessage>\r\n                          Please enter a valid email.\r\n                        </HelperMessage>\r\n                      )}\r\n                  </Fragment>\r\n                )}\r\n              </Field>\r\n            </FormFieldRow>\r\n            <FormFieldRow>\r\n              <Field\r\n                name=\"avatar\"\r\n                label=\"Avatar\"\r\n              >\r\n                {({ fieldProps, error }) => (\r\n                  <Fragment>\r\n                    <TextField autoComplete=\"off\" type=\"file\" {...fieldProps} onChange={handleAvatarUpload} accept=\".jpg,.jpeg,.png\"/>\r\n                    {!error && (\r\n                      <HelperMessage>\r\n                        You can upload a JPG/JPEG/PNG file of up to 2MB.\r\n                      </HelperMessage>\r\n                    )}\r\n                    {avatarFileSizeError && (\r\n                      <ErrorMessage>\r\n                        Image file didn't meet validation criteria.\r\n                      </ErrorMessage>\r\n                    )}\r\n                  </Fragment>\r\n                )}\r\n              </Field>\r\n              <CheckboxField name=\"newsletter\" label=\"Newsletter subscription\" defaultIsChecked={!!localStorage.getItem('newsletter_atlaskit_test') || undefined}>\r\n              {({ fieldProps }) => (\r\n                <Checkbox {...fieldProps} label=\"Receive weekly updates in your email box\" />\r\n              )}\r\n            </CheckboxField>\r\n            </FormFieldRow>\r\n            <FormFooter>\r\n              <ButtonGroup>\r\n                <Button appearance=\"subtle\" onClick={() => history.push('/atlaskit-user-profile/user-profile')}>Cancel</Button>\r\n                <LoadingButton\r\n                  type=\"submit\"\r\n                  appearance=\"primary\"\r\n                  isLoading={submitting}\r\n                >\r\n                  Update\r\n                </LoadingButton>\r\n              </ButtonGroup>\r\n            </FormFooter>\r\n          </form>\r\n        )}\r\n      </Form>\r\n    </FormWrapper>\r\n  )\r\n};\r\n\r\nexport default UserProfileForm\r\n","import React, { Fragment } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Header from '../shared/layout/Header';\r\nimport Footer from '../shared/layout/Footer';\r\nimport UserProfile from './UserProfile';\r\nimport UserProfileForm from './UserProfileForm';\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/atlaskit-user-profile\" component={UserProfileForm}/>\r\n        <Route exact path=\"/atlaskit-user-profile/user-profile\" component={UserProfile}/>\r\n        <Route exact path=\"/atlaskit-user-profile/user-profile/edit\" component={UserProfileForm}/>\r\n      </Switch>\r\n      <Footer />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Root\r\n","import React from 'react';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport Root from './views/Root';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router history={history}>\r\n      <Root />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}